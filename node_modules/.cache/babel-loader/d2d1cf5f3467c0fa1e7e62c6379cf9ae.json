{"ast":null,"code":"import _objectSpread from \"/Users/criley/Documents/Projects/car-tool/car-tool/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/criley/Documents/Projects/car-tool/car-tool/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/criley/Documents/Projects/car-tool/car-tool/src/components/CarTool.js\";\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { ToolHeader } from './ToolHeader';\nimport { CarTable } from './CarTable';\nimport { CarForm } from './CarForm';\nexport var CarTool = function CarTool(_ref) {\n  var cars = _ref.cars;\n\n  var _useState = useState({\n    cars: cars.concat(),\n    editCarId: ''\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var toggleEdit = function toggleEdit(carId) {\n    setState(_objectSpread({}, state, {\n      editCarId: carId\n    }));\n  };\n\n  var addCar = function addCar(newCar) {\n    newCar.id = state.cars[state.cars.length - 1].id + 1;\n    setState(_objectSpread({}, state, {\n      cars: state.cars.concat(newCar),\n      editCarId: ''\n    }));\n  };\n\n  var updateCar = function updateCar(_updateCar) {\n    console.log(_updateCar);\n    setState(_objectSpread({}, state, {\n      cars: state.cars.map(function (car) {\n        return car.id === _updateCar.id ? _updateCar : car;\n      }),\n      editCarId: ''\n    }));\n  };\n\n  var deleteCar = function deleteCar(carId) {\n    setState(_objectSpread({}, state, {\n      cars: state.cars.filter(function (car) {\n        return car.id !== parseInt(carId);\n      }),\n      editCarId: ''\n    }));\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(ToolHeader, {\n    headerText: \"Car Tool\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }), React.createElement(CarTable, {\n    cars: state.cars,\n    deleteCar: deleteCar,\n    updateCar: updateCar,\n    toggleEdit: toggleEdit,\n    editCarId: state.editCarId,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }), React.createElement(CarForm, {\n    buttonText: \"Add Car\",\n    onAddCar: addCar,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }));\n};\nCarTool.propTypes = {\n  cars: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number,\n    make: PropTypes.string,\n    model: PropTypes.string,\n    year: PropTypes.number,\n    color: PropTypes.string,\n    price: PropTypes.number\n  })).isRequired\n};\nCarTool.defaultProps = {\n  cars: []\n};","map":{"version":3,"sources":["/Users/criley/Documents/Projects/car-tool/car-tool/src/components/CarTool.js"],"names":["React","useState","PropTypes","ToolHeader","CarTable","CarForm","CarTool","cars","concat","editCarId","state","setState","toggleEdit","carId","addCar","newCar","id","length","updateCar","console","log","map","car","deleteCar","filter","parseInt","propTypes","arrayOf","shape","number","make","string","model","year","color","price","isRequired","defaultProps"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { ToolHeader } from './ToolHeader';\nimport { CarTable } from './CarTable';\nimport { CarForm } from './CarForm';\n\nexport const CarTool = ({ cars }) => {\n\n  const [ state, setState ] = useState({\n    cars: cars.concat(),\n    editCarId: '',\n  });\n\n  const toggleEdit = (carId) => {\n    setState({\n      ...state,\n      editCarId: carId,\n    });\n  };\n\n  const addCar = (newCar) => {\n    newCar.id = state.cars[state.cars.length - 1].id + 1;\n    setState({\n      ...state,\n      cars: state.cars.concat(newCar),\n      editCarId: '',\n    })\n  }\n\n  const updateCar = (updateCar) => {\n\n    console.log(updateCar);\n    setState({\n      ...state,\n      cars: state.cars.map(car => car.id === updateCar.id ? updateCar : car),\n      editCarId: '',\n    })\n  };\n\n  const deleteCar = (carId) => {\n    setState({\n      ...state,\n      cars: state.cars.filter(car => car.id !== parseInt(carId)),\n      editCarId: '',\n    })\n  };\n\n  return <>\n    <ToolHeader headerText=\"Car Tool\"/>\n    <CarTable cars={state.cars} deleteCar={deleteCar} updateCar={updateCar} toggleEdit={toggleEdit} editCarId={state.editCarId}/>\n    <CarForm buttonText=\"Add Car\" onAddCar={addCar}/>\n  </>;\n};\n\nCarTool.propTypes = {\n  cars: PropTypes.arrayOf(PropTypes.shape({\n    id: PropTypes.number,\n    make: PropTypes.string,\n    model: PropTypes.string,\n    year: PropTypes.number,\n    color: PropTypes.string,\n    price: PropTypes.number,\n  })).isRequired,\n};\n\nCarTool.defaultProps = {\n  cars: [],\n};"]},"metadata":{},"sourceType":"module"}