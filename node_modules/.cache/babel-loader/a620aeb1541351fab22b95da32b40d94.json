{"ast":null,"code":"import _defineProperty from \"/Users/criley/Documents/Projects/Car-Tool/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/criley/Documents/Projects/Car-Tool/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/criley/Documents/Projects/Car-Tool/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/criley/Documents/Projects/Car-Tool/src/components/ColorTool.js\";\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { ToolHeader } from './ToolHeader';\nexport var ColorTool = function ColorTool(_ref) {\n  var colors = _ref.colors;\n\n  // Destructuring => const { colors } = props;\n  //IMPORTANT RULE: anything passed in via props can never ever be mutated\n  // props are frozen\n  var _useState = useState({\n    colors: colors.concat(),\n    newColor: ''\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      state = _useState2[0],\n      setState = _useState2[1];\n\n  var change = function change(e) {\n    setState(_objectSpread({}, state, _defineProperty({}, e.target.name, e.target.value)));\n  };\n\n  var addColor = function addColor() {\n    setState({\n      colors: state.colors.concat(state.newColor),\n      newColor: ''\n    });\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(ToolHeader, {\n    headerText: \"Color Tool\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }), React.createElement(\"ul\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, state.colors.map(function (color) {\n    return React.createElement(\"li\", {\n      key: color,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, color);\n  })), React.createElement(\"form\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    htmlFor: \"color-input\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, \"New Color\"), React.createElement(\"input\", {\n    type: \"text\",\n    id: \"color-input\",\n    name: \"newColor\",\n    value: state.newColor,\n    onChange: change,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  })), React.createElement(\"button\", {\n    type: \"button\",\n    onClick: addColor,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, \"Add Color\")));\n}; // include proptypes with components\n\nColorTool.propTypes = {\n  colors: PropTypes.arrayOf(PropTypes.string).isRequired\n};","map":{"version":3,"sources":["/Users/criley/Documents/Projects/Car-Tool/src/components/ColorTool.js"],"names":["React","useState","PropTypes","ToolHeader","ColorTool","colors","concat","newColor","state","setState","change","e","target","name","value","addColor","map","color","propTypes","arrayOf","string","isRequired"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,UAAT,QAA2B,cAA3B;AAGA,OAAO,IAAMC,SAAS,GAAG,SAAZA,SAAY,OAAgB;AAAA,MAAbC,MAAa,QAAbA,MAAa;;AAEvC;AAEA;AACA;AALuC,kBASXJ,QAAQ,CAAC;AACnCI,IAAAA,MAAM,EAAEA,MAAM,CAACC,MAAP,EAD2B;AAEnCC,IAAAA,QAAQ,EAAE;AAFyB,GAAD,CATG;AAAA;AAAA,MAS/BC,KAT+B;AAAA,MASxBC,QATwB;;AAcvC,MAAMC,MAAM,GAAG,SAATA,MAAS,CAACC,CAAD,EAAO;AACpBF,IAAAA,QAAQ,mBACHD,KADG,sBAGJG,CAAC,CAACC,MAAF,CAASC,IAHL,EAGaF,CAAC,CAACC,MAAF,CAASE,KAHtB,GAAR;AAKD,GAND;;AAQA,MAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACrBN,IAAAA,QAAQ,CAAC;AACPJ,MAAAA,MAAM,EAAEG,KAAK,CAACH,MAAN,CAAaC,MAAb,CAAoBE,KAAK,CAACD,QAA1B,CADD;AAEPA,MAAAA,QAAQ,EAAE;AAFH,KAAD,CAAR;AAID,GALD;;AAOA,SAAO,0CACL,oBAAC,UAAD;AAAY,IAAA,UAAU,EAAC,YAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADK,EAEL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGC,KAAK,CAACH,MAAN,CAAaW,GAAb,CAAiB,UAAAC,KAAK;AAAA,WAAI;AAAI,MAAA,GAAG,EAAEA,KAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAiBA,KAAjB,CAAJ;AAAA,GAAtB,CADH,CAFK,EAKL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAO,IAAA,OAAO,EAAC,aAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,EAEE;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,EAAE,EAAC,aAAtB;AAAoC,IAAA,IAAI,EAAC,UAAzC;AACC,IAAA,KAAK,EAAET,KAAK,CAACD,QADd;AACwB,IAAA,QAAQ,EAAEG,MADlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,EAME;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,OAAO,EAAEK,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBANF,CALK,CAAP;AAeD,CA5CM,C,CA8CP;;AACAX,SAAS,CAACc,SAAV,GAAsB;AACpBb,EAAAA,MAAM,EAAEH,SAAS,CAACiB,OAAV,CAAkBjB,SAAS,CAACkB,MAA5B,EAAoCC;AADxB,CAAtB","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { ToolHeader } from './ToolHeader';\n\n\nexport const ColorTool = ({ colors }) => {\n\n  // Destructuring => const { colors } = props;\n\n  //IMPORTANT RULE: anything passed in via props can never ever be mutated\n  // props are frozen\n\n  // To be a react developer, you must understand how memory is managed in JavaScript\n\n  const [ state, setState ] = useState({\n    colors: colors.concat(),\n    newColor: '',\n  });\n\n  const change = (e) => {\n    setState({\n      ...state,\n      // newColor: e.target.value,\n      [ e.target.name ]: e.target.value,\n    });\n  };\n\n  const addColor = () => {\n    setState({\n      colors: state.colors.concat(state.newColor),\n      newColor: '',\n    })\n  };\n\n  return <>\n    <ToolHeader headerText=\"Color Tool\"/>\n    <ul>\n      {state.colors.map(color => <li key={color}>{color}</li>)}\n    </ul>\n    <form>\n      <div>\n        <label htmlFor=\"color-input\">New Color</label>\n        <input type=\"text\" id=\"color-input\" name=\"newColor\"\n         value={state.newColor} onChange={change} />\n      </div>\n      <button type=\"button\" onClick={addColor}>Add Color</button>\n    </form>\n  </>\n\n};\n\n// include proptypes with components\nColorTool.propTypes = {\n  colors: PropTypes.arrayOf(PropTypes.string).isRequired,\n}"]},"metadata":{},"sourceType":"module"}